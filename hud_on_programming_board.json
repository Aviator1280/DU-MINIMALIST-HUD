{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"dmgrep = DamageModule.new()\nsystem.showScreen(1)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"-- minimalistic hud\ndamage_html=dmgrep:renderHTML()\ndamage_css=dmgrep:renderCSS()\n-- Show the selected view\ni = dmgrep:getActiveView() \ntxt_view = \"\"\nif MINHUD_show_txt_module == true then\ntxt_view=damage_html[4]\nend\nsystem.setScreen(damage_css..damage_html[i]..txt_view)","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"1"},{"code":"dmgrep:nextFilter()","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"2"},{"code":"dmgrep:nextView()","filter":{"args":[{"value":"option2"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"3"},{"code":"unit.exit()","filter":{"args":[{"value":"option3"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"4"},{"code":"-------------------\n-- DAMAGE REPORT MODULE\n-------------------\n-- LUA Parameters\nMINHUD_show_labels = true --export: show/hide view labels\nMINHUD_defaultFilter = 1 --export: 1 for all,2 for avionics and weapons,3 for avionics only, 4 for weapons only\nMINHUD_defaultView = 1 --export: 1 for top,2 for side and 3 for front\nMINHUD_show_txt_module = true --export: enable the ship damage text report\nMINHUD_dmg_priority = 2 --export: Show damaged components (3) Below 100%, (2) Below 75%, (1) Below 50%\n\nMINHUD_size_ratio = 1 --export: change the size of the ship layout, use positive or negative numbers\nMINHUD_left_position = 5 --export: change the left position of the ship layout (Increase to move right)\nMINHUD_top_position = 180 --export: change the top position of the ship layout (Increase to move down)\nMINHUD_label_position = 0 --export: move the view label left or right (useful for centering)\n\nMINHUD_txt_module_left_pos = 1 --export:  change the left position of the ship layout (Increase to move right)   \nMINHUD_txt_module_top_pos = 120 --export: change the top position of the ship layout (Increase to move down)\n\n\nMINHUD_dmg_refresh_rate = 1 --export: Damage report refresh rate every x seconds\n-------------------\n-- General Functions\n-------------------\nfunction round(num, numDecimalPlaces)\n    return tonumber(string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num))\nend\n\nfunction getElemCategory(elemtype)\n    elem_category=\"UNKNOWN\"\n    if elemtype ~= nil then\n        local critical_part_list = {\"DYNAMIC CORE\",\"RESURRECTION NODE\",\"RADAR\"}   \n        local avionics_part_list = {\"ENGINE\",\"FUEL-TANK\",\"ADJUSTOR\",\"VERTICAL BOOSTER\",\"RETRO-ROCKET BRAKE\",\"WING\",\"ATMOSPHERIC AIRBRAKE\"}\n        local weapon_part_list = {\"GUNNER MODULE\",\"LASER\",\"COMMAND SEAT CONTROLLER\",\"COCKPIT\",\"CANNON\",\"MISSILE\",\"RAILGUN\"}   \n        -- CRITICALS\n        for _,reftype in ipairs(critical_part_list) do\n            if string.match(elemtype, reftype) then\n                elem_category=\"CRITICALS\"\n                break\n            end    \n        end\n        if elem_category == \"UNKNOWN\" then\n            -- AVIONICS \n            for _,reftype in ipairs(avionics_part_list) do\n                if string.match(elemtype, reftype) then\n                    elem_category=\"AVIONICS\"\n                    break\n                end\n            end\n            if elem_category == \"UNKNOWN\" then\n                -- WEAPONS\n                for _,reftype in ipairs(weapon_part_list) do\n                    -- Avoid mistaking laser emitter for a weapon...\n                    if elemtype == \"LASER\" then\n                        elem_category=\"WEAPON\"\n                        break \n                    elseif string.match(elemtype, reftype) then\n                        elem_category=\"WEAPON\"\n                        break\n                    end    \n                end \n            end\n        end \n    end\n    return elem_category\nend\n\n\n-------------------\n-- Element Class\n-------------------\nElement = {}\nElement.__index = Element\n\nfunction Element.new(elem_id,elem_type,elem_category, elem_name, elem_pos_x, elem_pos_y, elem_pos_z)\n    local self = setmetatable({}, Element)\n    self.elem_id = elem_id\n    self.elem_type = elem_type\n    self.elem_category = elem_category\n    self.elem_name = elem_name\n    self.elem_pos_x = elem_pos_x\n    self.elem_pos_y = elem_pos_y\n    self.elem_pos_z = elem_pos_z\n\n    return self\nend\n\n-------------------\n-- DamageModule Class\n-------------------\nDamageModule = {}\nDamageModule.__index = DamageModule\n\nfunction DamageModule.new()\n    local self = setmetatable({}, DamageModule)\n    self.elem_list = {}\n    self.elem_filter = MINHUD_defaultFilter -- 4 for all,3 for avionics and weapons,2 for avionics only, 1 for weapons\n    self.active_view = MINHUD_defaultView -- 1 for top,2 for side and 3 for front\n    self.last_time_updated = 0\n    --Default placement\n    self.dmg_module_size_ratio = 0\n\n    -- Getting the core offset\n    -- XS CORE\n    local core_offset = -5\n    self.dmg_module_size_ratio = 10\n\n    local core_hp = core.getElementHitPointsById(core.getId())\n    if core_hp > 10000 then\n        -- L CORE\n        core_offset = -128\n        self.dmg_module_size_ratio = 1\n    elseif core_hp > 1000 then\n        -- M CORE\n        core_offset = -64\n        self.dmg_module_size_ratio = 2\n    elseif core_hp > 150 then\n        -- S CORE\n        core_offset = -32\n        self.dmg_module_size_ratio = 5\n    end\n\n    self.core_offset=core_offset   \n    -- Adjustments\n    self.dmg_module_size_ratio=self.dmg_module_size_ratio+MINHUD_size_ratio\n\n    self.max_x= -999999999\n    self.min_x= 999999999\n    self.max_y= -999999999\n    self.min_y = 999999999\n    self.max_z= -999999999\n    self.min_z = 999999999\n\n\n    -- STORING SHIP ELEMENTS\n    for i,idelem in ipairs(core.getElementIdList()) do\n        local elem_type = core.getElementTypeById(idelem):upper()\n        local elem_categ = getElemCategory(elem_type)\n        local elem_name = core.getElementNameById(idelem)\n        local x,y,z = table.unpack(core.getElementPositionById(idelem))\n        x=(x+core_offset)*self.dmg_module_size_ratio\n        y=(y+core_offset)*self.dmg_module_size_ratio\n        z=(z+core_offset)*self.dmg_module_size_ratio\n        if self.min_x > x then\n            self.min_x = x\n        end    \n        if self.min_y > y then\n            self.min_y = y\n        end\n        if self.min_z > z then\n            self.min_z = z\n        end \n        if self.max_x < x then\n            self.max_x = x\n        end    \n        if self.max_y < y then\n            self.max_y = y\n        end\n        if self.max_z < z then\n            self.max_z = z\n        end\n        self:add(Element.new(idelem,elem_type, elem_categ, elem_name, x, y, z))\n    end\n    -- Computing ship size\n    self.ship_width = 0\n    if self.min_x < 0 then\n        self.ship_width = self.ship_width + (self.min_x)*-1\n    else\n        self.ship_width = self.ship_width + self.min_x\n    end      \n    if self.max_x < 0 then\n        self.ship_width = self.ship_width + (self.max_x)*-1\n    else\n        self.ship_width = self.ship_width + self.max_x\n    end\n    self.ship_height = 0\n    if self.min_y < 0 then\n        self.ship_height = self.ship_height + (self.min_y)*-1\n    else\n        self.ship_height = self.ship_height + self.min_y\n    end      \n    if self.max_y < 0 then\n        self.ship_height = self.ship_height + (self.max_y)*-1\n    else\n        self.ship_height = self.ship_height + self.max_y\n    end\n    self.ship_z = 0\n    if self.min_z < 0 then\n        self.ship_z = self.ship_z + (self.min_z)*-1\n    else\n        self.ship_z = self.ship_z + self.min_z\n    end      \n    if self.max_z < 0 then\n        self.ship_z = self.ship_z + (self.max_z)*-1\n    else\n        self.ship_z = self.ship_z + self.max_z\n    end\n\n    return self\nend\n\nfunction DamageModule.add(self,element)\n    table.insert(self.elem_list, element)\nend\n\nfunction DamageModule.nextFilter(self)\n    if self.elem_filter < 4 then\n        self.elem_filter = self.elem_filter + 1\n    else \n        self.elem_filter = 1 \t    \n    end \nend\n\nfunction DamageModule.nextView(self)\n    if self.active_view < 3 then\n        self.active_view = self.active_view + 1\n    else \n        self.active_view = 1 \t    \n    end \nend\n\nfunction DamageModule.getActiveView(self)\n    return self.active_view\nend\n\nfunction DamageModule.renderCSS(self)\n    local css = [[\n    <style>\n    svg {\n    padding:10px;\n} \n    .view {\n    position:absolute;\n    top:]]..MINHUD_left_position..[[px;\n    left:]]..MINHUD_top_position..[[px;\n}\n    .dmgdotlabel {\n    width:100%;\n    text-align:center;\n    font-size:1vh;\n    font-weight:bold;\n}\n    ]]\n    if MINHUD_show_txt_module == true then\n        css=css..[[\n        .title {\n        font-size:1vh;\n        text-align:center;\n        font-weight:bold;\n    }\n        .r {\n        text-align:right;\n    }\n        .dmgtxt {\n        text-align:center;\n        background-color: rgba(0, 0, 0, .4);\n        width: 9vw;\n        font-size:1vh;   \n        position:absolute;\n        left:]]..MINHUD_txt_module_left_pos..[[px;\n        top:]]..MINHUD_txt_module_top_pos..[[px;\n    }\n        .pristine {\n        color: #9BFFAC;\n    }\n        .ldmg {\n        color: #FFDD8E;\n    }\n        .mdmg {\n        color: #FF9E66;\n    }\n        .hdmg {\n        color: #FF2819;\n    }\n        .dead {\n        color: #7F120C;\n    }]]\n    end\n    css=css..[[</style>]]\n    return css\nend\n\nfunction DamageModule.renderHTML(self)\n    local front_view_html = \"\"\n    local side_view_html = \"\"\n    local top_view_html = \"\"\n    local table_view_html = \"\"\n    if system.getTime() > self.last_time_updated + MINHUD_dmg_refresh_rate then\n        --Data gathering\n        local dead_elem_list=\"\"\n        local high_damage_list=\"\"\n        local medium_damage_list=\"\"\n        local light_damage_list=\"\"\n        local label_x = self.max_x-self.min_x\n        local maxtoptv = -99999999999\n        local maxtopfv = -99999999999\n        local maxtopsv = -99999999999\n\n        for _,elem in ipairs(self.elem_list) do\n            local element_excluded = false\n            if self.elem_filter == 2 and elem.elem_category ~= \"AVIONICS\" and elem.elem_category ~= \"WEAPON\" and elem.elem_category ~= \"CRITICAL\" then\n                element_excluded = true\n            elseif self.elem_filter == 3 and elem.elem_category ~= \"AVIONICS\" and elem.elem_category ~= \"CRITICAL\" then\n                element_excluded = true\n            elseif self.elem_filter == 4 and elem.elem_category ~= \"WEAPON\" and elem.elem_category ~= \"CRITICAL\" then\n                element_excluded = true   \n            end    \n            if element_excluded == false then\n                local elem_hp = core.getElementHitPointsById(elem.elem_id)\n                local elemmax_hp = core.getElementMaxHitPointsById(elem.elem_id)\n                local elem_hp_percentage = (elem_hp*100)/elemmax_hp\n                local color=\"\"\n                local opacity=0.2\n                elem_hp_percentage = round(elem_hp_percentage)\n                if elem_hp_percentage >= 100 then\n                    color=\"#9BFFAC\"\n                elseif elem_hp_percentage >= 75 then\n                    opacity=0.3\n                    color=\"#FFDD8E\"\n                    if MINHUD_dmg_priority > 2 then\n                        light_damage_list=light_damage_list..[[<tr class=\"ldmg\"><td>]]..elem.elem_name..[[</td><td class=\"r\">]]..elem_hp_percentage..[[%</td></tr>]]\n                    end\n                elseif elem_hp_percentage >= 50 then\n                    color=\"#FF9E66\"\n                    opacity=0.4\n                    if MINHUD_dmg_priority > 1 then\n                        medium_damage_list=medium_damage_list..[[<tr class=\"mdmg\"><td>]]..elem.elem_name..[[</td><td class=\"r\">]]..elem_hp_percentage..[[%</td></tr>]]\n                    end\n                elseif elem_hp_percentage > 0 then\n                    color=\"#FF2819\"\n                    opacity=0.5\n                    high_damage_list=high_damage_list..[[<tr class=\"hdmg\"><td>]]..elem.elem_name..[[</td><td class=\"r\">]]..elem_hp_percentage..[[%</td></tr>]]\n                elseif elem_hp_percentage == 0 then\n                    color=\"#7F120C\"\n                    opacity=1\n                    dead_elem_list=dead_elem_list..[[<tr class=\"dead\"><td>]]..elem.elem_name..[[</td><td class=\"r\">0%</td></tr>]]\n                end\n                local left = 0\n                local top = 0\n                -- We are using quadrants to place points correctly\n                -- 1 2\n                -- 3 4\n                if (elem.elem_pos_x>=self.min_x and elem.elem_pos_x<=0) and (elem.elem_pos_y>=0 and elem.elem_pos_y<=self.max_y) then    \n                    -- 1\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_y - elem.elem_pos_y\n                elseif (elem.elem_pos_x>0 and elem.elem_pos_x<=self.max_x) and (elem.elem_pos_y>=0 and elem.elem_pos_y<=self.max_y) then    \n                    -- 2\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_y - elem.elem_pos_y\n                elseif (elem.elem_pos_x>=self.min_x and elem.elem_pos_x<=0) and (elem.elem_pos_y>=self.min_y and elem.elem_pos_y<0) then    \n                    -- 3\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_y + (elem.elem_pos_y*-1)\n                elseif (elem.elem_pos_x>0 and elem.elem_pos_x<=self.max_x) and (elem.elem_pos_y>=self.min_y and elem.elem_pos_y<0) then    \n                    -- 4\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_y + (elem.elem_pos_y*-1)\n                end    \n                -- Top view x,y\n                if maxtoptv < top then\n                    maxtoptv = top\n                end \n                top_view_html = top_view_html..[[<circle fill-opacity=\"]]..opacity..[[\" cx=\"]]..left..[[\" cy=\"]]..top..[[\" r=\"5\" fill=\"]]..color..[[\" />]]\n                -- Front view x,z\n                if (elem.elem_pos_x>=self.min_x and elem.elem_pos_x<=0) and (elem.elem_pos_z>=0 and elem.elem_pos_z<=self.max_z) then    \n                    -- 1\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_z - elem.elem_pos_z\n                elseif (elem.elem_pos_x>0 and elem.elem_pos_x<=self.max_x) and (elem.elem_pos_z>=0 and elem.elem_pos_z<=self.max_z) then    \n                    -- 2\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_z - elem.elem_pos_z\n                elseif (elem.elem_pos_x>=self.min_x and elem.elem_pos_x<=0) and (elem.elem_pos_z>=self.min_z and elem.elem_pos_z<0) then    \n                    -- 3\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_z + (elem.elem_pos_z*-1)\n                elseif (elem.elem_pos_x>0 and elem.elem_pos_x<=self.max_x) and (elem.elem_pos_z>=self.min_z and elem.elem_pos_z<0) then    \n                    -- 4\n                    left = (self.min_x*-1) + elem.elem_pos_x\n                    top = self.max_z + (elem.elem_pos_z*-1)\n                end \n                if maxtopfv < top then\n                    maxtopfv = top\n                end \n                front_view_html = front_view_html..[[<circle fill-opacity=\"]]..opacity..[[\" cx=\"]]..left..[[\" cy=\"]]..top..[[\" r=\"5\" fill=\"]]..color..[[\" />]]\n                -- Side view y,z\n                if (elem.elem_pos_y>=self.min_y and elem.elem_pos_y<=0) and (elem.elem_pos_z>=0 and elem.elem_pos_z<=self.max_z) then    \n                    -- 1\n                    left = (self.min_y*-1) + elem.elem_pos_y\n                    top = self.max_z - elem.elem_pos_z\n                elseif (elem.elem_pos_y>0 and elem.elem_pos_y<=self.max_y) and (elem.elem_pos_z>=0 and elem.elem_pos_z<=self.max_z) then    \n                    -- 2\n                    left = (self.min_y*-1) + elem.elem_pos_y\n                    top = self.max_z - elem.elem_pos_z\n                elseif (elem.elem_pos_y>=self.min_y and elem.elem_pos_y<=0) and (elem.elem_pos_z>=self.min_z and elem.elem_pos_z<0) then    \n                    -- 3\n                    left = (self.min_y*-1) + elem.elem_pos_y\n                    top = self.max_z + (elem.elem_pos_z*-1)\n                elseif (elem.elem_pos_y>0 and elem.elem_pos_y<=self.max_y) and (elem.elem_pos_z>=self.min_z and elem.elem_pos_z<0) then    \n                    -- 4\n                    left = (self.min_y*-1) + elem.elem_pos_y\n                    top = self.max_z + (elem.elem_pos_z*-1)\n                end \n                if maxtopsv < top then\n                    maxtopsv = top\n                end \n                side_view_html = side_view_html..[[<circle fill-opacity=\"]]..opacity..[[\" cx=\"]]..left..[[\" cy=\"]]..top..[[\" r=\"5\" fill=\"]]..color..[[\" />]]\n            end \n        end\n        -- Text damage report\n        --Adding filter label below\n        local filter_label = \"ALL\"\n        if self.elem_filter == 2 then\n            filter_label = \"WP & AV\"\n        elseif self.elem_filter == 3 then\n            filter_label = \"AVIONICS\"\n        elseif  self.elem_filter == 4 then\n            filter_label = \"WEAPONS\"\n        end\n        -- Top view code x,y\n        top_view_html=[[<div class=\"view top_view\"><svg width=\"1000\" height=\"1000\">]]..top_view_html\n        if MINHUD_show_labels == true then\n            top_view_html=top_view_html..[[<text x=\"]]..(label_x/2)+MINHUD_label_position..[[\" y=\"]]..(maxtoptv+30)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">TOP</text><text x=\"]]..(label_x/2)+MINHUD_label_position..[[\" y=\"]]..(maxtoptv+45)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">]]..filter_label..[[</text>]]\n        end\n        top_view_html=top_view_html..[[</svg></div>]]\n\n        -- front view code x,z\n        front_view_html=[[<div class=\"view front_view\"><svg width=\"1000\" height=\"1000\">]]..front_view_html\n        if MINHUD_show_labels == true then\n            front_view_html=front_view_html..[[<text x=\"]]..(label_x/2)+MINHUD_label_position..[[\" y=\"]]..(maxtopfv+30)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">FRONT</text><text x=\"]]..(label_x/2)+MINHUD_label_position..[[\" y=\"]]..(maxtopfv+45)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">]]..filter_label..[[</text>]]\n        end\n        front_view_html=front_view_html..[[</svg></div>]]\n        -- side view y,z\n        side_view_html=[[<div class=\"view side_view\"><svg width=\"1000\" height=\"1000\">]]..side_view_html\n        if MINHUD_show_labels == true then\n            side_view_html=side_view_html..[[<text x=\"]]..(label_x/2)+MINHUD_label_position..[[\" y=\"]]..(maxtopsv+30)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">SIDE</text><text x=\"]]..(label_x/2)+MINHUD_label_position..[[\" y=\"]]..(maxtopsv+45)..[[\" text-anchor=\"middle\" font-family=\"sans-serif\" font-size=\"14px\" fill=\"white\">]]..filter_label..[[</text>]]\n        end    \n        side_view_html=side_view_html..[[</svg></div>]]\n        table_view_html = table_view_html..[[<div class=\"dmgtxt\"><div class=\"title\">Damage Report :<br>]]..filter_label..[[</div><hr><table style=\"width:100%;\">]]..dead_elem_list..high_damage_list..medium_damage_list..light_damage_list..[[</table></div>]]\n    end\n    return {top_view_html,front_view_html,side_view_html,table_view_html}\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"5"}],"methods":[],"events":[]}
