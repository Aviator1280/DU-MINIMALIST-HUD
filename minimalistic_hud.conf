name: minimalistic hud

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    gyro:
        class: GyroUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual

handlers:
    library:
        start:
            lua: |
                -------------------
                -- DAMAGE REPORT MODULE
                -------------------
                -- LUA Parameters
                damagereport_module_active = true --export: Enable the ship's damage report
                damagereport_module_defaultFilter = 1 --export: 1 for all,2 for avionics and weapons,3 for avionics only, 4 for weapons only
                damagereport_ratio_modifier = 0 --export: Change the size of the ship's map, use positive or negative numbers
                damagereport_x_pos_modifier = 0 --export: Change the x position of the ship's map
                damagereport_y_pos_modifier = 0 --export: Change the y position of the ship's map
                damagereport_rotate_x = 43 --export: Change the x rotation of the ship's map in degrees (0 for 2D)
                damagereport_rotate_y = -7 --export: Change the y rotation of the ship's map in degrees (0 for 2D)
                damagereport_rotate_z = 8 --export: Change the z rotation of the ship's map in degrees (0 for 2D)
                damagereport_txt_module_active = true --export: Enable the ship's damage text report
                damagereport_txt_posx = 1 --export: Damage text position from the left side of the HUD   
                damagereport_txt_posy = 120 --export: Damage text position from the top side of the HUD 
                damagereport_txt_priority = 2 --export: Show damaged components (3) Below 100%, (2) Below 75%, (1) Below 50%

                damagereport_refresh_rate = 0.25 --export: Damage report refresh rate every x seconds
                -------------------
                -- General Functions
                -------------------
                function round(num, numDecimalPlaces)
                    return tonumber(string.format("%." .. (numDecimalPlaces or 0) .. "f", num))
                end

                function getElemCategory(elemtype)
                    elem_category="UNKNOWN"
                    if elemtype ~= nil then
                        local critical_part_list = {"DYNAMIC CORE","RESURRECTION NODE"}   
                        local avionics_part_list = {"ENGINE","FUEL-TANK","ADJUSTOR","VERTICAL BOOSTER","RETRO-ROCKET BRAKE","WING","ATMOSPHERIC AIRBRAKE"}
                        local weapon_part_list = {"GUNNER MODULE","LASER","COMMAND SEAT CONTROLLER","COCKPIT","CANNON","MISSILE","RAILGUN"}   
                        -- CRITICALS
                        for _,reftype in ipairs(critical_part_list) do
                            if string.match(elemtype, reftype) then
                                elem_category="CRITICALS"
                                break
                            end    
                        end
                        if elem_category == "UNKNOWN" then
                            -- AVIONICS 
                            for _,reftype in ipairs(avionics_part_list) do
                                if string.match(elemtype, reftype) then
                                    elem_category="AVIONICS"
                                    break
                                end    
                            end
                            if elem_category == "UNKNOWN" then
                                -- WEAPONS
                                for _,reftype in ipairs(avionics_part_list) do
                                    -- Avoid mistaking laser emitter for a weapon...
                                    if elemtype == "LASER" then
                                        elem_category="WEAPON"
                                        break 
                                    elseif string.match(elemtype, reftype) then
                                        elem_category="WEAPON"
                                        break
                                    end    
                                end 
                            end
                        end 
                    end    
                    return elem_category
                end

                -------------------
                -- Element Class
                -------------------
                Element = {}
                Element.__index = Element

                function Element.new(elem_id,elem_type,elem_category, elem_name, elem_pos_x, elem_pos_y, elem_pos_z)
                    local self = setmetatable({}, Element)
                    self.elem_id = elem_id
                    self.elem_type = elem_type
                    self.elem_category = elem_category
                    self.elem_name = elem_name
                    self.elem_pos_x = elem_pos_x
                    self.elem_pos_y = elem_pos_y
                    self.elem_pos_z = elem_pos_z

                    return self
                end

                -------------------
                -- DamageModule Class
                -------------------
                DamageModule = {}
                DamageModule.__index = DamageModule

                function DamageModule.new()
                    local self = setmetatable({}, DamageModule)
                    self.elem_list = {}
                    self.elem_filter = damagereport_module_defaultFilter -- 4 for all,3 for avionics and weapons,2 for avionics only, 1 for weapons
                    self.last_time_updated = 0
                    --Default placement
                    self.dmg_module_size_ratio = 0
                    self.dmg_module_center_posx = 0
                    self.dmg_module_center_posy = 0

                    -- Getting the core offset
                    -- XS CORE
                    local core_offset = -5
                    self.dmg_module_size_ratio = 14
                    self.dmg_module_center_posx = 100
                    self.dmg_module_center_posy = 380

                    local core_hp = core.getElementHitPointsById(core.getId())
                    if core_hp > 10000 then
                        -- L CORE
                        core_offset = -128
                        self.dmg_module_size_ratio = 1
                        self.dmg_module_center_posx = 20
                        self.dmg_module_center_posy = 45
                    elseif core_hp > 1000 then
                        -- M CORE
                        core_offset = -64
                        self.dmg_module_size_ratio = 2
                        self.dmg_module_center_posx = 210
                        self.dmg_module_center_posy = 70
                    elseif core_hp > 150 then
                        -- S CORE
                        core_offset = -32
                        self.dmg_module_size_ratio = 5
                        self.dmg_module_center_posx = 240
                        self.dmg_module_center_posy = 70 
                    end

                    self.core_offset=core_offset   
                    -- Adjustments
                    self.dmg_module_size_ratio=self.dmg_module_size_ratio+damagereport_ratio_modifier
                    self.dmg_module_center_posx=self.dmg_module_center_posx+damagereport_x_pos_modifier
                    self.dmg_module_center_posy=self.dmg_module_center_posy+damagereport_y_pos_modifier

                    self.min_y = 999999999
                    -- STORING SHIP ELEMENTS
                    for i,idelem in ipairs(core.getElementIdList()) do
                        local elem_type = core.getElementTypeById(idelem):upper()
                        local elem_categ = getElemCategory(elem_type)
                        local elem_name = core.getElementNameById(idelem)
                        local x,y,z = table.unpack(core.getElementPositionById(idelem))
                        x=(x+core_offset)*self.dmg_module_size_ratio
                        y=(y+core_offset)*self.dmg_module_size_ratio
                        z=(z+core_offset)*self.dmg_module_size_ratio
                        if self.min_y > y then
                            self.min_y = y
                        end    
                        self:add(Element.new(idelem,elem_type, elem_categ, elem_name, x, y, z))
                    end

                    return self
                end

                function DamageModule.add(self,element)
                    table.insert(self.elem_list, element)
                end

                function DamageModule.nextFilter(self)
                    if self.elem_filter < 4 then
                        self.elem_filter = self.elem_filter + 1
                    else 
                        self.elem_filter = 1 	    
                    end 
                end

                function DamageModule.renderHTML(self)
                    local html=""
                    if damagereport_module_active == true then
                        -- Limiting refresh
                        if system.getTime() > self.last_time_updated + damagereport_refresh_rate then
                            local css = [[ 
                            <style>
                            .rotate_div {
                            -webkit-transform:rotateX(]]..damagereport_rotate_x..[[deg) rotateY(]]..damagereport_rotate_y..[[deg) rotateZ(]]..damagereport_rotate_z..[[deg);
                            -moz-transform:rotateX(]]..damagereport_rotate_x..[[deg) rotateY(]]..damagereport_rotate_y..[[deg) rotateZ(]]..damagereport_rotate_z..[[deg);
                            -ms-transform:rotateX(]]..damagereport_rotate_x..[[deg) rotateY(]]..damagereport_rotate_y..[[deg) rotateZ(]]..damagereport_rotate_z..[[deg);
                            -o-transform:rotateX(]]..damagereport_rotate_x..[[deg) rotateY(]]..damagereport_rotate_y..[[deg) rotateZ(]]..damagereport_rotate_z..[[deg);
                            transform:rotateX(]]..damagereport_rotate_x..[[deg) rotateY(]]..damagereport_rotate_y..[[deg) rotateZ(]]..damagereport_rotate_z..[[deg);
                        }
                            .title {
                            font-size:1vh;
                            text-align:center;
                            font-weight:bold;
                        }
                            .dmgtxt {
                            background-color: rgba(0, 0, 0, .4);
                            width: 8vw;
                            font-size:1vh;   
                            position:absolute;
                            left:]]..damagereport_txt_posx..[[px;
                            top:]]..damagereport_txt_posy..[[px;
                        }
                            .dmgdotlabel {
                            width: 8vw;
                            text-align:center;
                            font-size:2vh;
                            font-weight:bold;
                            position:absolute;
                        }
                            .dmgdot {
                            height: 10px;
                            width: 10px;
                            border-radius: 50%;
                            display: inline-block;
                            position:absolute;
                            opacity:0.35;
                        }
                            .pristine {
                            background-color: #9BFFAC;
                        }
                            .ldmg {
                            background-color: #FFDD8E;
                        }
                            .mdmg {
                            background-color: #FF9E66;
                        }
                            .hdmg {
                            background-color: #FF2819;
                        }
                            .dead {
                            background-color: #7F120C;
                        }
                            </style>
                            <div class="rotate_div">
                            ]]  
                            html = css
                            havedamage = false
                            local dead_elem_list=""
                            local high_damage_list=""
                            local medium_damage_list=""
                            local light_damage_list=""

                            for _,elem in ipairs(self.elem_list) do
                                local element_excluded = false
                                if self.elem_filter == 2 and elem.elem_category ~= "AVIONICS" and elem.elem_category ~= "WEAPON" and elem.elem_category ~= "CRITICAL" then
                                    element_excluded = true
                                elseif self.elem_filter == 3 and elem.elem_category ~= "AVIONICS" and elem.elem_category ~= "CRITICAL" then
                                    element_excluded = true
                                elseif self.elem_filter == 4 and elem.elem_category ~= "WEAPON" and elem.elem_category ~= "CRITICAL" then
                                    element_excluded = true   
                                end    
                                if element_excluded == false then
                                    local elem_hp = core.getElementHitPointsById(elem.elem_id)
                                    local elemmax_hp = core.getElementMaxHitPointsById(elem.elem_id)
                                    local elem_hp_percentage = (elem_hp*100)/elemmax_hp
                                    local color_class=""
                                    if elem_hp_percentage >= 100 then
                                        color_class=" pristine"
                                    elseif elem_hp_percentage >= 75 then
                                        color_class=" ldmg"
                                        havedamage = true
                                        if damagereport_txt_priority > 2 then
                                            light_damage_list=light_damage_list..[[<div style="color:#FFDD8E;"> ]]..elem.elem_name..[[ -> ]]..elem_hp_percentage..[[</div>]]
                                        end                
                                    elseif elem_hp_percentage >= 50 then
                                        color_class=" mdmg"
                                        havedamage = true
                                        if damagereport_txt_priority > 1 then
                                            medium_damage_list=medium_damage_list..[[<div style="color:#FF9E66;"> ]]..elem.elem_name..[[ -> ]]..round(elem_hp_percentage,0)..[[%</div>]]
                                        end
                                    elseif elem_hp_percentage > 0 then
                                        color_class=" hdmg"
                                        havedamage = true
                                        high_damage_list=high_damage_list..[[<div style="color:#FF2819;"> ]]..elem.elem_name..[[ -> ]]..round(elem_hp_percentage,0)..[[%</div>]]
                                    elseif elem_hp_percentage == 0 then
                                        color_class=" dead"
                                        havedamage = true
                                        dead_elem_list=dead_elem_list..[[<div style="color:#7F120C;"> ]]..elem.elem_name..[[ -> DEAD</div>]]
                                    end
                                    html = html..[[<div class="dmgdot]]..color_class..[[" style="transform:translateY(]]..(-elem.elem_pos_z)..[[px);left:]]..self.dmg_module_center_posx+elem.elem_pos_x..[[px;top:]]..self.dmg_module_center_posy-elem.elem_pos_y..[[px;"></div>]]      
                                end 
                            end    
                            html = html..[[</div>]]
                            -- Text damage report
                            --Adding filter label below
                            local filter_label = "ALL"
                            if self.elem_filter == 2 then
                                filter_label = "WP & AV"
                            elseif self.elem_filter == 3 then
                                filter_label = "AVIONICS"
                            elseif  self.elem_filter == 4 then
                                filter_label = "WEAPONS"
                            end
                            if damagereport_txt_module_active==true then
                                html = html..[[<div class="dmgtxt"><div class="title">Damage Report :<br>]]..filter_label..[[</div><hr>]]..dead_elem_list..high_damage_list..medium_damage_list..light_damage_list..[[</div>]]
                            end
                        end   
                    end
                    return html
                end
    library:
        start:
            lua: |
                -------------------
                -- FUEL MODULE
                -------------------
                -- LUA Parameters
                fuel_module_active = true --export: Enable the fuel module
                fuel_module_posx = 1 --export: Fuel module position from the left of the HUD
                fuel_module_posy = 0 --export: Fuel module position from the top side of the HUD
                fuel_module_refresh_rate = 0.25 --export: Fuel module refresh rate every x seconds
                fuel_module_show_remaining_time = 10 --export: If fuel is lasting more than x hours, do not show remaining time, 0 to always show remaining time

                -------------------
                -- FUEL CLASS
                -------------------
                FuelModule = {}
                FuelModule.__index = FuelModule

                function FuelModule.new()
                    local self = setmetatable({}, FuelModule)
                    self.html = ""
                    self.last_time_updated = 0
                    return self
                end

                function FuelModule.computeData(self,fuel_tank)
                    local fuel_percentage = ""
                    local fuel_time_to_empty = ""

                    local obj, pos, err = json.decode(fuel_tank.getData(), 1, nil)
                    if err then
                    else
                        -- Computing fuel percentage
                        if obj.percentage ~= nil then
                            fuel_percentage = obj.percentage
                        end
                        -- Computing time left thanks to data in seconds
                        if obj.timeLeft ~= nil and obj.timeLeft ~= "" then
                            local time_left = tonumber(obj.timeLeft)
                            if time_left ~= nil then
                                -- DAYS (86 400 seconds are one day)
                                local days = time_left // 86400
                                -- Modulus to get hours lefts
                                time_left = time_left % 86400
                                -- HOURS (3600 seconds are one hour)
                                local hours = time_left // 3600
                                -- Modulus again to get minutes lefts
                                time_left = time_left % 3600
                                -- MINUTES (60 seconds are 1 minute) 
                                local minutes = time_left // 60
                                -- Modulus again to get minutes lefts
                                time_left = time_left % 60
                                local seconds = time_left
                                -- To avoid useless infos we show only if we have 99 days of autonomy
                                if days < 99 then                   
                                    local truehours = tonumber(obj.timeLeft) // 3600
                                    if (fuel_module_show_remaining_time==0 or fuel_module_show_remaining_time>=truehours) then
                                        if days > 0 then
                                            fuel_time_to_empty = " | "..tonumber(string.format("%."..(0).."f",days)).."d:"..tonumber(string.format("%."..(0).."f",hours)).."h:"..tonumber(string.format("%."..(0).."f",minutes)).."m:"..tonumber(string.format("%."..(0).."f", seconds)).."s"  
                                        elseif hours>0 then
                                            fuel_time_to_empty = " | "..tonumber(string.format("%."..(0).."f",hours)).."h:"..tonumber(string.format("%."..(0).."f",minutes)).."m:"..tonumber(string.format("%."..(0).."f", seconds)).."s"         
                                        elseif minutes>0 then
                                            fuel_time_to_empty = " | "..tonumber(string.format("%."..(0).."f",minutes)).."m:"..tonumber(string.format("%."..(0).."f", seconds)).."s"            
                                        elseif seconds>0 then
                                            fuel_time_to_empty = " | "..tonumber(string.format("%."..(0).."f",minutes)).."m:"..tonumber(string.format("%."..(0).."f", seconds)).."s"                
                                        end        	 
                                    end
                                end    
                            end      
                        end          
                    end
                    return {fuel_percentage,fuel_time_to_empty}
                end

                function FuelModule.renderHTML(self)
                    if fuel_module_active == true then
                        -- Limiting refresh
                        if system.getTime() > self.last_time_updated + fuel_module_refresh_rate then
                            self.last_time_updated = system.getTime()
                            -- CSS           
                            self.html = [[
                            <style>
                            #progress {
                            opacity:0.8;
                            width: 8vw;   
                            background-color:black;
                            position: relative;
                        }
                            #percent {
                            color:white;
                            font-weight:bold;
                            position: absolute; 
                            font-size:1.2vh;
                            left: 4%;
                        }
                            #bar {
                            height: 1.4vh;
                        }
                            .fuelmodule {
                            position:absolute;
                            top:]]..fuel_module_posy..[[px;
                            left:]]..fuel_module_posx..[[px;
                        }
                            </style>
                            <div class="fuelmodule">
                            <table>
                            ]]
                            -- ATMO    
                            for _,f_tank in ipairs(atmofueltank) do
                                local ft_data = self:computeData(f_tank)
                                self.html=self.html..[[<tr><td><div id="progress"><span id="percent">]]..ft_data[1]..[[%]]..ft_data[2]..[[</span><div id="bar" style="background-color:#8FC3BD;width:]]..ft_data[1]..[[%;"></div></td></tr>]]
                            end
                            -- SPACE
                            for _,f_tank in ipairs(spacefueltank) do
                                local ft_data = self:computeData(f_tank)
                                self.html=self.html..[[<tr><td><div id="progress"><span id="percent">]]..ft_data[1]..[[%]]..ft_data[2]..[[</span><div id="bar" style="background-color:#BCB83C;width:]]..ft_data[1]..[[%;"></div></td></tr>]]
                            end
                            -- ROCKET
                            for _,f_tank in ipairs(rocketfueltank) do
                                local ft_data = self:computeData(f_tank)
                                self.html=self.html..[[<tr><td><div id="progress"><span id="percent">]]..ft_data[1]..[[%]]..ft_data[2]..[[</span><div id="bar" style="background-color:#937E97;width:]]..ft_data[1]..[[%;"></div></td></tr>]]
                            end 

                            --CLOSING TABLE 
                            self.html=self.html..[[</table></div>]]
                        end    
                    end    
                    return self.html    
                end
    unit:
        start:
            lua: |
                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
                Nav.axisCommandManager:setTargetGroundAltitude(4)

                -- element widgets
                -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
                _autoconf.displayCategoryPanel(weapon, weapon_size, L_TEXT("ui_lua_widget_weapon", "Weapons"), "weapon", true)
                core.show()
                _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope")
                placeRadar = true
                if atmofueltank_size > 0 then
                    --_autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                if spacefueltank_size > 0 then
                    --_autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                --_autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"), "fuel_container")
                if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
                    _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                    placeRadar = false
                end
                if antigrav ~= nil then antigrav.show() end
                if warpdrive ~= nil then warpdrive.show() end
                if gyro ~= nil then gyro.show() end

                -- freeze the player in he is remote controlling the construct
                if Nav.control.isRemoteControlled() == 1 then
                    system.freeze(1)
                end

                -- landing gear
                -- make sure every gears are synchonized with the first
                gearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end
                -- minimalistic hud
                fm = FuelModule.new()
                dmgrep = DamageModule.new()
        stop:
            lua: |
                _autoconf.hideCategoryPanels()
                if antigrav ~= nil then antigrav.hide() end
                if warpdrive ~= nil then warpdrive.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()
                Nav.control.switchOffHeadlights()

    system:
        start:
            lua: |
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0
        flush:
            lua: |
                -- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu

                local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                -- final inputs
                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput

                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(core.getConstructWorldOrientationUp())
                local constructForward = vec3(core.getConstructWorldOrientationForward())
                local constructRight = vec3(core.getConstructWorldOrientationRight())
                local constructVelocity = vec3(core.getWorldVelocity())
                local constructVelocityDir = vec3(core.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)

                -- Rotation
                local constructAngularVelocity = vec3(core.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp

                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    local autoRollRollThreshold = 1.0
                    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range

                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end

                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio

                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio

                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end

                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities

                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)

                -- Brakes
                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)

                -- AutoNavigation regroups all the axis command by 'TargetSpeed'
                local autoNavigationEngineTags = ''
                local autoNavigationAcceleration = vec3()
                local autoNavigationUseBrake = false

                -- Longitudinal Translation
                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end

                end

                -- Lateral Translation
                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                if (lateralCommandType == axisCommandType.byThrottle) then
                    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                end

                -- Vertical Translation
                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                if (verticalCommandType == axisCommandType.byThrottle) then
                    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                end

                -- Auto Navigation (Cruise Control)
                if (autoNavigationAcceleration:len() > constants.epsilon) then
                    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                    then
                        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                    end
                    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                end

                -- Rockets
                Nav:setBoosterCommand('rocket_engine')

        update:
            lua: |
                Nav:update()
                fuel_html=fm:renderHTML()
                damage_html=dmgrep:renderHTML()
                system.setScreen(fuel_html..damage_html)
                system.showScreen(1)

        actionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end

        actionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end

        actionStart:
            args: [forward]
            lua: pitchInput = pitchInput - 1
        actionStop:
            args: [forward]
            lua: pitchInput = pitchInput + 1
        actionStart:
            args: [backward]
            lua: pitchInput = pitchInput + 1
        actionStop:
            args: [backward]
            lua: pitchInput = pitchInput - 1
        actionStart:
            args: [left]
            lua: rollInput = rollInput - 1
        actionStop:
            args: [left]
            lua: rollInput = rollInput + 1
        actionStart:
            args: [right]
            lua: rollInput = rollInput + 1
        actionStop:
            args: [right]
            lua: rollInput = rollInput - 1

        actionStart:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
        actionStop:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)

        actionStart:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
        actionStop:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)

        actionStart:
            args: [up]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
        actionStop:
            args: [up]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
        actionStart:
            args: [down]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
        actionStop:
            args: [down]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)

        actionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)

        actionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)


        actionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)

        actionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)

        actionStart:
            args: [yawright]
            lua: yawInput = yawInput - 1
        actionStop:
            args: [yawright]
            lua: yawInput = yawInput + 1
        actionStart:
            args: [yawleft]
            lua: yawInput = yawInput + 1
        actionStop:
            args: [yawleft]
            lua: yawInput = yawInput - 1
        actionStart:
            args: [brake]
            lua: |
                brakeInput = brakeInput + 1
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        actionStop:
            args: [brake]
            lua: brakeInput = brakeInput - 1

        actionLoop:
            args: [brake]
            lua: |
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        actionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        actionStart:
            args: [stopengines]
            lua: Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
        actionStart:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
        actionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
        actionStart:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
        actionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)

        actionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end
        actionStart:
            args: [warp]
            lua: if warpdrive ~= nil then warpdrive.activateWarp() end
        actionStart:
            args: [option1]
            lua: dmgrep:nextFilter()
